#!/usr/bin/env python

import MOODS.scan
import MOODS.tools
import MOODS.parsers

# simple toy matrix to demonstrate how this works
mat1 = [
       [1,1,1,1,1], # A
       [0,0,0,0,0], # C
       [0,0,0,0,0], # G
       [0,0,0,0,0], # T
      ]

# matches AAAAA and nothing else
matrices = [mat1]
thresholds = [5]

# bg doesn't matter for this example
bg = MOODS.tools.flat_bg(4)

# we'll need a scanner object to work with variants
# see also ex-scanner.py
scanner = MOODS.scan.Scanner(7)
scanner.set_motifs(matrices, bg, thresholds)


# example sequence
# W is either A or T (standard IUPAC symbol)
seq = "AAAAAWGGAAGAGGGGAAAAACCCAA"
#      01234567890123456789012345


# we'll need to generate a list of variants we are interested in
# first, we recover the variants corresponding to SNPs in the sequence
# these are automatically in a format that the scanner can use
snps = MOODS.tools.snp_variants(seq)

# second, we'll generate some more complicated indels
indels = []

# this replaces a single symbol with string "AA" 
# (end = start + 1 for single character replacements)
indel = (10,11,"AA")
indels.append(indel)

# this inserts "AAAA" between two symbols without replacing anything
# (end = start for insertions)
indel = (12,12,"AAAA")
indels.append(indel)

# this is a deletion
# (empty string for deletion)
indel = (21,24,"")
indels.append(indel)

# for boring reasons, we need to construct wrapper objects out of the variants
variants = list(snps) + [MOODS.tools.variant(start, end, replacement) for (start, end, replacement) in indels]
variants.reverse()


# this gives all hits not affected by SNPs or indels
results_plain = scanner.scan(seq)
print("- Matches without variants")
for hit in results_plain[0]:
    print("Position: {}; Score: {}".format(str(hit.pos), str(hit.score)))
    print(seq)
    print(hit.pos*" " + len(matrices[0][0])*"^")

# # this gives hits that are generated by a variant or a combination of variants
results_variants = scanner.variant_matches(seq,variants)
print("- Matches with variants")
print("  Note match positions are relative to the modified sequence")
print("  Insertions and deletions can change the offset relative to the original")
for hit in results_variants[0]:
    # this is how you extract the variant/SNP/indel information from the MOODS proxy objects:
    #  - hit.variants gives a list of indices to the variants list that was give to variant_matches function
    #  - for a variant object, variant.start_pos, variant.end_pos and variant.modified_seq gives the variant information
    hit_variants = ",".join([str((str(variants[j].start_pos), str(variants[j].end_pos), variants[j].modified_seq)) for j in hit.variants])
    
    # for visualisation, we construct the modified sequence
    modified_seq = list(seq.lower())
    hit_indicator = list(hit.pos*" " + len(matrices[0][0])*"^")
    for j in hit.variants:
        if variants[j].modified_seq != "":
            modified_seq[variants[j].start_pos:variants[j].end_pos] = list(variants[j].modified_seq)
        else:
            modified_seq[variants[j].start_pos:variants[j].end_pos] = ["-"]
            hit_indicator.insert(variants[j].start_pos, "-")
    modified_seq = "".join(modified_seq)
    hit_indicator = "".join(hit_indicator)

    print("Position: {}; Score: {}; Variants: {}".format(str(hit.pos), str(hit.score), hit_variants))
    print(modified_seq)
    print(hit_indicator)


