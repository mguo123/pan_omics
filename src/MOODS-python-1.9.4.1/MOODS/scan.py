# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_scan')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_scan')
    _scan = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_scan', [dirname(__file__)])
        except ImportError:
            import _scan
            return _scan
        try:
            _mod = imp.load_module('_scan', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _scan = swig_import_helper()
    del swig_import_helper
else:
    import _scan
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _scan.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _scan.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _scan.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _scan.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _scan.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _scan.SwigPyIterator_equal(self, x)

    def copy(self):
        return _scan.SwigPyIterator_copy(self)

    def next(self):
        return _scan.SwigPyIterator_next(self)

    def __next__(self):
        return _scan.SwigPyIterator___next__(self)

    def previous(self):
        return _scan.SwigPyIterator_previous(self)

    def advance(self, n):
        return _scan.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _scan.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _scan.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _scan.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _scan.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _scan.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _scan.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _scan.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_double___nonzero__(self)

    def __bool__(self):
        return _scan.vector_double___bool__(self)

    def __len__(self):
        return _scan.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_double___setitem__(self, *args)

    def pop(self):
        return _scan.vector_double_pop(self)

    def append(self, x):
        return _scan.vector_double_append(self, x)

    def empty(self):
        return _scan.vector_double_empty(self)

    def size(self):
        return _scan.vector_double_size(self)

    def swap(self, v):
        return _scan.vector_double_swap(self, v)

    def begin(self):
        return _scan.vector_double_begin(self)

    def end(self):
        return _scan.vector_double_end(self)

    def rbegin(self):
        return _scan.vector_double_rbegin(self)

    def rend(self):
        return _scan.vector_double_rend(self)

    def clear(self):
        return _scan.vector_double_clear(self)

    def get_allocator(self):
        return _scan.vector_double_get_allocator(self)

    def pop_back(self):
        return _scan.vector_double_pop_back(self)

    def erase(self, *args):
        return _scan.vector_double_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_double_push_back(self, x)

    def front(self):
        return _scan.vector_double_front(self)

    def back(self):
        return _scan.vector_double_back(self)

    def assign(self, n, x):
        return _scan.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_double_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_double_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_double_reserve(self, n)

    def capacity(self):
        return _scan.vector_double_capacity(self)
    __swig_destroy__ = _scan.delete_vector_double
    __del__ = lambda self: None
vector_double_swigregister = _scan.vector_double_swigregister
vector_double_swigregister(vector_double)

class vector_uchar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_uchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_uchar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_uchar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_uchar___nonzero__(self)

    def __bool__(self):
        return _scan.vector_uchar___bool__(self)

    def __len__(self):
        return _scan.vector_uchar___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_uchar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_uchar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_uchar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_uchar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_uchar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_uchar___setitem__(self, *args)

    def pop(self):
        return _scan.vector_uchar_pop(self)

    def append(self, x):
        return _scan.vector_uchar_append(self, x)

    def empty(self):
        return _scan.vector_uchar_empty(self)

    def size(self):
        return _scan.vector_uchar_size(self)

    def swap(self, v):
        return _scan.vector_uchar_swap(self, v)

    def begin(self):
        return _scan.vector_uchar_begin(self)

    def end(self):
        return _scan.vector_uchar_end(self)

    def rbegin(self):
        return _scan.vector_uchar_rbegin(self)

    def rend(self):
        return _scan.vector_uchar_rend(self)

    def clear(self):
        return _scan.vector_uchar_clear(self)

    def get_allocator(self):
        return _scan.vector_uchar_get_allocator(self)

    def pop_back(self):
        return _scan.vector_uchar_pop_back(self)

    def erase(self, *args):
        return _scan.vector_uchar_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_uchar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_uchar_push_back(self, x)

    def front(self):
        return _scan.vector_uchar_front(self)

    def back(self):
        return _scan.vector_uchar_back(self)

    def assign(self, n, x):
        return _scan.vector_uchar_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_uchar_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_uchar_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_uchar_reserve(self, n)

    def capacity(self):
        return _scan.vector_uchar_capacity(self)
    __swig_destroy__ = _scan.delete_vector_uchar
    __del__ = lambda self: None
vector_uchar_swigregister = _scan.vector_uchar_swigregister
vector_uchar_swigregister(vector_uchar)

class vector_size_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_size_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_size_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_size_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_size_t___nonzero__(self)

    def __bool__(self):
        return _scan.vector_size_t___bool__(self)

    def __len__(self):
        return _scan.vector_size_t___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_size_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_size_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_size_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_size_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_size_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_size_t___setitem__(self, *args)

    def pop(self):
        return _scan.vector_size_t_pop(self)

    def append(self, x):
        return _scan.vector_size_t_append(self, x)

    def empty(self):
        return _scan.vector_size_t_empty(self)

    def size(self):
        return _scan.vector_size_t_size(self)

    def swap(self, v):
        return _scan.vector_size_t_swap(self, v)

    def begin(self):
        return _scan.vector_size_t_begin(self)

    def end(self):
        return _scan.vector_size_t_end(self)

    def rbegin(self):
        return _scan.vector_size_t_rbegin(self)

    def rend(self):
        return _scan.vector_size_t_rend(self)

    def clear(self):
        return _scan.vector_size_t_clear(self)

    def get_allocator(self):
        return _scan.vector_size_t_get_allocator(self)

    def pop_back(self):
        return _scan.vector_size_t_pop_back(self)

    def erase(self, *args):
        return _scan.vector_size_t_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_size_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_size_t_push_back(self, x)

    def front(self):
        return _scan.vector_size_t_front(self)

    def back(self):
        return _scan.vector_size_t_back(self)

    def assign(self, n, x):
        return _scan.vector_size_t_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_size_t_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_size_t_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_size_t_reserve(self, n)

    def capacity(self):
        return _scan.vector_size_t_capacity(self)
    __swig_destroy__ = _scan.delete_vector_size_t
    __del__ = lambda self: None
vector_size_t_swigregister = _scan.vector_size_t_swigregister
vector_size_t_swigregister(vector_size_t)

class vector_vector_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_vector_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_vector_double___nonzero__(self)

    def __bool__(self):
        return _scan.vector_vector_double___bool__(self)

    def __len__(self):
        return _scan.vector_vector_double___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_vector_double___setitem__(self, *args)

    def pop(self):
        return _scan.vector_vector_double_pop(self)

    def append(self, x):
        return _scan.vector_vector_double_append(self, x)

    def empty(self):
        return _scan.vector_vector_double_empty(self)

    def size(self):
        return _scan.vector_vector_double_size(self)

    def swap(self, v):
        return _scan.vector_vector_double_swap(self, v)

    def begin(self):
        return _scan.vector_vector_double_begin(self)

    def end(self):
        return _scan.vector_vector_double_end(self)

    def rbegin(self):
        return _scan.vector_vector_double_rbegin(self)

    def rend(self):
        return _scan.vector_vector_double_rend(self)

    def clear(self):
        return _scan.vector_vector_double_clear(self)

    def get_allocator(self):
        return _scan.vector_vector_double_get_allocator(self)

    def pop_back(self):
        return _scan.vector_vector_double_pop_back(self)

    def erase(self, *args):
        return _scan.vector_vector_double_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_vector_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_vector_double_push_back(self, x)

    def front(self):
        return _scan.vector_vector_double_front(self)

    def back(self):
        return _scan.vector_vector_double_back(self)

    def assign(self, n, x):
        return _scan.vector_vector_double_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_vector_double_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_vector_double_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_vector_double_reserve(self, n)

    def capacity(self):
        return _scan.vector_vector_double_capacity(self)
    __swig_destroy__ = _scan.delete_vector_vector_double
    __del__ = lambda self: None
vector_vector_double_swigregister = _scan.vector_vector_double_swigregister
vector_vector_double_swigregister(vector_vector_double)

class vector_vector_vector_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_vector_vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_vector_vector_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_vector_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_vector_vector_double___nonzero__(self)

    def __bool__(self):
        return _scan.vector_vector_vector_double___bool__(self)

    def __len__(self):
        return _scan.vector_vector_vector_double___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_vector_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_vector_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_vector_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_vector_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_vector_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_vector_vector_double___setitem__(self, *args)

    def pop(self):
        return _scan.vector_vector_vector_double_pop(self)

    def append(self, x):
        return _scan.vector_vector_vector_double_append(self, x)

    def empty(self):
        return _scan.vector_vector_vector_double_empty(self)

    def size(self):
        return _scan.vector_vector_vector_double_size(self)

    def swap(self, v):
        return _scan.vector_vector_vector_double_swap(self, v)

    def begin(self):
        return _scan.vector_vector_vector_double_begin(self)

    def end(self):
        return _scan.vector_vector_vector_double_end(self)

    def rbegin(self):
        return _scan.vector_vector_vector_double_rbegin(self)

    def rend(self):
        return _scan.vector_vector_vector_double_rend(self)

    def clear(self):
        return _scan.vector_vector_vector_double_clear(self)

    def get_allocator(self):
        return _scan.vector_vector_vector_double_get_allocator(self)

    def pop_back(self):
        return _scan.vector_vector_vector_double_pop_back(self)

    def erase(self, *args):
        return _scan.vector_vector_vector_double_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_vector_vector_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_vector_vector_double_push_back(self, x)

    def front(self):
        return _scan.vector_vector_vector_double_front(self)

    def back(self):
        return _scan.vector_vector_vector_double_back(self)

    def assign(self, n, x):
        return _scan.vector_vector_vector_double_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_vector_vector_double_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_vector_vector_double_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_vector_vector_double_reserve(self, n)

    def capacity(self):
        return _scan.vector_vector_vector_double_capacity(self)
    __swig_destroy__ = _scan.delete_vector_vector_vector_double
    __del__ = lambda self: None
vector_vector_vector_double_swigregister = _scan.vector_vector_vector_double_swigregister
vector_vector_vector_double_swigregister(vector_vector_vector_double)

class vector_match(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_match, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_match, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_match_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_match___nonzero__(self)

    def __bool__(self):
        return _scan.vector_match___bool__(self)

    def __len__(self):
        return _scan.vector_match___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_match___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_match___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_match___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_match___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_match___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_match___setitem__(self, *args)

    def pop(self):
        return _scan.vector_match_pop(self)

    def append(self, x):
        return _scan.vector_match_append(self, x)

    def empty(self):
        return _scan.vector_match_empty(self)

    def size(self):
        return _scan.vector_match_size(self)

    def swap(self, v):
        return _scan.vector_match_swap(self, v)

    def begin(self):
        return _scan.vector_match_begin(self)

    def end(self):
        return _scan.vector_match_end(self)

    def rbegin(self):
        return _scan.vector_match_rbegin(self)

    def rend(self):
        return _scan.vector_match_rend(self)

    def clear(self):
        return _scan.vector_match_clear(self)

    def get_allocator(self):
        return _scan.vector_match_get_allocator(self)

    def pop_back(self):
        return _scan.vector_match_pop_back(self)

    def erase(self, *args):
        return _scan.vector_match_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_match(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_match_push_back(self, x)

    def front(self):
        return _scan.vector_match_front(self)

    def back(self):
        return _scan.vector_match_back(self)

    def assign(self, n, x):
        return _scan.vector_match_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_match_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_match_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_match_reserve(self, n)

    def capacity(self):
        return _scan.vector_match_capacity(self)
    __swig_destroy__ = _scan.delete_vector_match
    __del__ = lambda self: None
vector_match_swigregister = _scan.vector_match_swigregister
vector_match_swigregister(vector_match)

class vector_vector_match(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_vector_match, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_vector_match, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_vector_match_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_vector_match___nonzero__(self)

    def __bool__(self):
        return _scan.vector_vector_match___bool__(self)

    def __len__(self):
        return _scan.vector_vector_match___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_vector_match___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_vector_match___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_vector_match___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_vector_match___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_vector_match___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_vector_match___setitem__(self, *args)

    def pop(self):
        return _scan.vector_vector_match_pop(self)

    def append(self, x):
        return _scan.vector_vector_match_append(self, x)

    def empty(self):
        return _scan.vector_vector_match_empty(self)

    def size(self):
        return _scan.vector_vector_match_size(self)

    def swap(self, v):
        return _scan.vector_vector_match_swap(self, v)

    def begin(self):
        return _scan.vector_vector_match_begin(self)

    def end(self):
        return _scan.vector_vector_match_end(self)

    def rbegin(self):
        return _scan.vector_vector_match_rbegin(self)

    def rend(self):
        return _scan.vector_vector_match_rend(self)

    def clear(self):
        return _scan.vector_vector_match_clear(self)

    def get_allocator(self):
        return _scan.vector_vector_match_get_allocator(self)

    def pop_back(self):
        return _scan.vector_vector_match_pop_back(self)

    def erase(self, *args):
        return _scan.vector_vector_match_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_vector_match(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_vector_match_push_back(self, x)

    def front(self):
        return _scan.vector_vector_match_front(self)

    def back(self):
        return _scan.vector_vector_match_back(self)

    def assign(self, n, x):
        return _scan.vector_vector_match_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_vector_match_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_vector_match_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_vector_match_reserve(self, n)

    def capacity(self):
        return _scan.vector_vector_match_capacity(self)
    __swig_destroy__ = _scan.delete_vector_vector_match
    __del__ = lambda self: None
vector_vector_match_swigregister = _scan.vector_vector_match_swigregister
vector_vector_match_swigregister(vector_vector_match)

class vector_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_string___nonzero__(self)

    def __bool__(self):
        return _scan.vector_string___bool__(self)

    def __len__(self):
        return _scan.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_string___setitem__(self, *args)

    def pop(self):
        return _scan.vector_string_pop(self)

    def append(self, x):
        return _scan.vector_string_append(self, x)

    def empty(self):
        return _scan.vector_string_empty(self)

    def size(self):
        return _scan.vector_string_size(self)

    def swap(self, v):
        return _scan.vector_string_swap(self, v)

    def begin(self):
        return _scan.vector_string_begin(self)

    def end(self):
        return _scan.vector_string_end(self)

    def rbegin(self):
        return _scan.vector_string_rbegin(self)

    def rend(self):
        return _scan.vector_string_rend(self)

    def clear(self):
        return _scan.vector_string_clear(self)

    def get_allocator(self):
        return _scan.vector_string_get_allocator(self)

    def pop_back(self):
        return _scan.vector_string_pop_back(self)

    def erase(self, *args):
        return _scan.vector_string_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_string_push_back(self, x)

    def front(self):
        return _scan.vector_string_front(self)

    def back(self):
        return _scan.vector_string_back(self)

    def assign(self, n, x):
        return _scan.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_string_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_string_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_string_reserve(self, n)

    def capacity(self):
        return _scan.vector_string_capacity(self)
    __swig_destroy__ = _scan.delete_vector_string
    __del__ = lambda self: None
vector_string_swigregister = _scan.vector_string_swigregister
vector_string_swigregister(vector_string)

class vector_variant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_variant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_variant, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_variant_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_variant___nonzero__(self)

    def __bool__(self):
        return _scan.vector_variant___bool__(self)

    def __len__(self):
        return _scan.vector_variant___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_variant___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_variant___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_variant___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_variant___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_variant___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_variant___setitem__(self, *args)

    def pop(self):
        return _scan.vector_variant_pop(self)

    def append(self, x):
        return _scan.vector_variant_append(self, x)

    def empty(self):
        return _scan.vector_variant_empty(self)

    def size(self):
        return _scan.vector_variant_size(self)

    def swap(self, v):
        return _scan.vector_variant_swap(self, v)

    def begin(self):
        return _scan.vector_variant_begin(self)

    def end(self):
        return _scan.vector_variant_end(self)

    def rbegin(self):
        return _scan.vector_variant_rbegin(self)

    def rend(self):
        return _scan.vector_variant_rend(self)

    def clear(self):
        return _scan.vector_variant_clear(self)

    def get_allocator(self):
        return _scan.vector_variant_get_allocator(self)

    def pop_back(self):
        return _scan.vector_variant_pop_back(self)

    def erase(self, *args):
        return _scan.vector_variant_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_variant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_variant_push_back(self, x)

    def front(self):
        return _scan.vector_variant_front(self)

    def back(self):
        return _scan.vector_variant_back(self)

    def assign(self, n, x):
        return _scan.vector_variant_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_variant_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_variant_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_variant_reserve(self, n)

    def capacity(self):
        return _scan.vector_variant_capacity(self)
    __swig_destroy__ = _scan.delete_vector_variant
    __del__ = lambda self: None
vector_variant_swigregister = _scan.vector_variant_swigregister
vector_variant_swigregister(vector_variant)

class vector_match_variant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_match_variant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_match_variant, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_match_variant_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_match_variant___nonzero__(self)

    def __bool__(self):
        return _scan.vector_match_variant___bool__(self)

    def __len__(self):
        return _scan.vector_match_variant___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_match_variant___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_match_variant___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_match_variant___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_match_variant___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_match_variant___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_match_variant___setitem__(self, *args)

    def pop(self):
        return _scan.vector_match_variant_pop(self)

    def append(self, x):
        return _scan.vector_match_variant_append(self, x)

    def empty(self):
        return _scan.vector_match_variant_empty(self)

    def size(self):
        return _scan.vector_match_variant_size(self)

    def swap(self, v):
        return _scan.vector_match_variant_swap(self, v)

    def begin(self):
        return _scan.vector_match_variant_begin(self)

    def end(self):
        return _scan.vector_match_variant_end(self)

    def rbegin(self):
        return _scan.vector_match_variant_rbegin(self)

    def rend(self):
        return _scan.vector_match_variant_rend(self)

    def clear(self):
        return _scan.vector_match_variant_clear(self)

    def get_allocator(self):
        return _scan.vector_match_variant_get_allocator(self)

    def pop_back(self):
        return _scan.vector_match_variant_pop_back(self)

    def erase(self, *args):
        return _scan.vector_match_variant_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_match_variant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_match_variant_push_back(self, x)

    def front(self):
        return _scan.vector_match_variant_front(self)

    def back(self):
        return _scan.vector_match_variant_back(self)

    def assign(self, n, x):
        return _scan.vector_match_variant_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_match_variant_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_match_variant_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_match_variant_reserve(self, n)

    def capacity(self):
        return _scan.vector_match_variant_capacity(self)
    __swig_destroy__ = _scan.delete_vector_match_variant
    __del__ = lambda self: None
vector_match_variant_swigregister = _scan.vector_match_variant_swigregister
vector_match_variant_swigregister(vector_match_variant)

class vector_vector_match_variant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_vector_match_variant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_vector_match_variant, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_vector_match_variant_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_vector_match_variant___nonzero__(self)

    def __bool__(self):
        return _scan.vector_vector_match_variant___bool__(self)

    def __len__(self):
        return _scan.vector_vector_match_variant___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_vector_match_variant___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_vector_match_variant___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_vector_match_variant___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_vector_match_variant___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_vector_match_variant___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_vector_match_variant___setitem__(self, *args)

    def pop(self):
        return _scan.vector_vector_match_variant_pop(self)

    def append(self, x):
        return _scan.vector_vector_match_variant_append(self, x)

    def empty(self):
        return _scan.vector_vector_match_variant_empty(self)

    def size(self):
        return _scan.vector_vector_match_variant_size(self)

    def swap(self, v):
        return _scan.vector_vector_match_variant_swap(self, v)

    def begin(self):
        return _scan.vector_vector_match_variant_begin(self)

    def end(self):
        return _scan.vector_vector_match_variant_end(self)

    def rbegin(self):
        return _scan.vector_vector_match_variant_rbegin(self)

    def rend(self):
        return _scan.vector_vector_match_variant_rend(self)

    def clear(self):
        return _scan.vector_vector_match_variant_clear(self)

    def get_allocator(self):
        return _scan.vector_vector_match_variant_get_allocator(self)

    def pop_back(self):
        return _scan.vector_vector_match_variant_pop_back(self)

    def erase(self, *args):
        return _scan.vector_vector_match_variant_erase(self, *args)

    def __init__(self, *args):
        this = _scan.new_vector_vector_match_variant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scan.vector_vector_match_variant_push_back(self, x)

    def front(self):
        return _scan.vector_vector_match_variant_front(self)

    def back(self):
        return _scan.vector_vector_match_variant_back(self)

    def assign(self, n, x):
        return _scan.vector_vector_match_variant_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_vector_match_variant_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_vector_match_variant_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_vector_match_variant_reserve(self, n)

    def capacity(self):
        return _scan.vector_vector_match_variant_capacity(self)
    __swig_destroy__ = _scan.delete_vector_vector_match_variant
    __del__ = lambda self: None
vector_vector_match_variant_swigregister = _scan.vector_vector_match_variant_swigregister
vector_vector_match_variant_swigregister(vector_vector_match_variant)


def scan_dna(seq, matrices, bg, thresholds, window_size=7):
    return _scan.scan_dna(seq, matrices, bg, thresholds, window_size)
scan_dna = _scan.scan_dna

def scan(seq, matrices, bg, thresholds, window_size, alphabet):
    return _scan.scan(seq, matrices, bg, thresholds, window_size, alphabet)
scan = _scan.scan

def scan_best_hits_dna(seq, matrices, target, iterations=10, MULT=2, LIMIT_MULT=10, window_size=7):
    return _scan.scan_best_hits_dna(seq, matrices, target, iterations, MULT, LIMIT_MULT, window_size)
scan_best_hits_dna = _scan.scan_best_hits_dna

def naive_scan_dna(*args):
    return _scan.naive_scan_dna(*args)
naive_scan_dna = _scan.naive_scan_dna
class match(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, match, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, match, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pos"] = _scan.match_pos_set
    __swig_getmethods__["pos"] = _scan.match_pos_get
    if _newclass:
        pos = _swig_property(_scan.match_pos_get, _scan.match_pos_set)
    __swig_setmethods__["score"] = _scan.match_score_set
    __swig_getmethods__["score"] = _scan.match_score_get
    if _newclass:
        score = _swig_property(_scan.match_score_get, _scan.match_score_set)

    def __init__(self):
        this = _scan.new_match()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scan.delete_match
    __del__ = lambda self: None
match_swigregister = _scan.match_swigregister
match_swigregister(match)

class variant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, variant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, variant, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start_pos"] = _scan.variant_start_pos_set
    __swig_getmethods__["start_pos"] = _scan.variant_start_pos_get
    if _newclass:
        start_pos = _swig_property(_scan.variant_start_pos_get, _scan.variant_start_pos_set)
    __swig_setmethods__["end_pos"] = _scan.variant_end_pos_set
    __swig_getmethods__["end_pos"] = _scan.variant_end_pos_get
    if _newclass:
        end_pos = _swig_property(_scan.variant_end_pos_get, _scan.variant_end_pos_set)
    __swig_setmethods__["modified_seq"] = _scan.variant_modified_seq_set
    __swig_getmethods__["modified_seq"] = _scan.variant_modified_seq_get
    if _newclass:
        modified_seq = _swig_property(_scan.variant_modified_seq_get, _scan.variant_modified_seq_set)

    def __lt__(self, rhs):
        return _scan.variant___lt__(self, rhs)

    def __init__(self, *args):
        this = _scan.new_variant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scan.delete_variant
    __del__ = lambda self: None
variant_swigregister = _scan.variant_swigregister
variant_swigregister(variant)

class match_with_variant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, match_with_variant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, match_with_variant, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pos"] = _scan.match_with_variant_pos_set
    __swig_getmethods__["pos"] = _scan.match_with_variant_pos_get
    if _newclass:
        pos = _swig_property(_scan.match_with_variant_pos_get, _scan.match_with_variant_pos_set)
    __swig_setmethods__["score"] = _scan.match_with_variant_score_set
    __swig_getmethods__["score"] = _scan.match_with_variant_score_get
    if _newclass:
        score = _swig_property(_scan.match_with_variant_score_get, _scan.match_with_variant_score_set)
    __swig_setmethods__["variants"] = _scan.match_with_variant_variants_set
    __swig_getmethods__["variants"] = _scan.match_with_variant_variants_get
    if _newclass:
        variants = _swig_property(_scan.match_with_variant_variants_get, _scan.match_with_variant_variants_set)

    def __init__(self):
        this = _scan.new_match_with_variant()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _scan.delete_match_with_variant
    __del__ = lambda self: None
match_with_variant_swigregister = _scan.match_with_variant_swigregister
match_with_variant_swigregister(match_with_variant)

class Scanner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scanner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scanner, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _scan.new_Scanner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_motifs(self, matrices, bg, thresholds):
        return _scan.Scanner_set_motifs(self, matrices, bg, thresholds)

    def scan(self, s):
        return _scan.Scanner_scan(self, s)

    def scan_max_hits(self, s, max_hits):
        return _scan.Scanner_scan_max_hits(self, s, max_hits)

    def variant_matches(self, seq, variants, max_depth=0):
        return _scan.Scanner_variant_matches(self, seq, variants, max_depth)
    __swig_destroy__ = _scan.delete_Scanner
    __del__ = lambda self: None
Scanner_swigregister = _scan.Scanner_swigregister
Scanner_swigregister(Scanner)

# This file is compatible with both classic and new-style classes.


